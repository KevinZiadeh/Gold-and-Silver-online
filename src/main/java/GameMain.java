import java.awt.Color;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import javax.swing.JFrame;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Group1
 */
public class GameMain extends javax.swing.JFrame {
    public static User user;
    public static ServerConnection con;
    private Component cmp;
    /**
     * Creates new form GameMain
     */
    public GameMain() {
        initComponents();
        container.removeAll();
        container.add(MainMenu);
        container.repaint();
        container.revalidate();
    }
    
    public GameMain(ServerConnection con) throws Exception {
    	user = (User)con.receiveUser(); 
        initComponents();
        //for now clear everything. Going to add later main menu
        container.removeAll();
        container.add(MainMenu);
        container.repaint();
        container.revalidate();
        this.con = con;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        container = new javax.swing.JPanel();
        MainMenu = new javax.swing.JPanel();
        SingleplayerSelectionPanel = new javax.swing.JPanel();
        SingleplayerSelectionLabel = new javax.swing.JLabel();
        MultiplayerSelectionPanel = new javax.swing.JPanel();
        MultiplayerSelectionLabel = new javax.swing.JLabel();
        TournamenSelectionPanel = new javax.swing.JPanel();
        TournamenSelectiontLabel = new javax.swing.JLabel();
        TradePanel1 = new javax.swing.JPanel();
        TradeLabel1 = new javax.swing.JLabel();
        HowToMessagePanel = new javax.swing.JPanel();
        HowToMessage = new javax.swing.JTextArea();
        GamePlay = new javax.swing.JPanel();
        TradePanel = new javax.swing.JPanel();
        TradeLabel = new javax.swing.JLabel();
        Guess = new javax.swing.JPanel();
        GuessSeperator = new javax.swing.JSeparator();
        GuessLabel = new javax.swing.JLabel();
        GuessInput = new javax.swing.JTextField();
        ExitPanel = new javax.swing.JPanel();
        ExitLabel = new javax.swing.JLabel();
        GuessSubmitPanel = new javax.swing.JPanel();
        GuessSubmitLabel = new javax.swing.JLabel();
        Multiplayer = new javax.swing.JPanel();
        MultiMsgPanel = new javax.swing.JPanel();
        MultiMsgLabel = new javax.swing.JLabel();
        MultReadyPanel = new javax.swing.JPanel();
        MultReadyLabel = new javax.swing.JLabel();
        MultExitPanel = new javax.swing.JPanel();
        MultExitLabel = new javax.swing.JLabel();
        GameTopMenu = new javax.swing.JPanel();
        HowToSeperator = new javax.swing.JSeparator();
        HowToPanel = new javax.swing.JPanel();
        HowToLabel = new javax.swing.JLabel();
        NicknameSeperator = new javax.swing.JSeparator();
        GoldSeperator = new javax.swing.JSeparator();
        SilverSeperator = new javax.swing.JSeparator();
        UsernameLabel = new javax.swing.JLabel();
        GoldLabel = new javax.swing.JLabel();
        GoldNumber = new javax.swing.JLabel();
        SilverLabel = new javax.swing.JLabel();
        SilverNumber = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        bg.setBackground(new java.awt.Color(50, 30, 90));
        bg.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        bg.setPreferredSize(new java.awt.Dimension(1280, 720));

        container.setBackground(new java.awt.Color(50, 30, 90));
        container.setPreferredSize(new java.awt.Dimension(1280, 720));
        container.setLayout(new java.awt.CardLayout());

        MainMenu.setBackground(new java.awt.Color(50, 30, 90));

        SingleplayerSelectionPanel.setBackground(new java.awt.Color(230, 230, 230));

        SingleplayerSelectionLabel.setBackground(new java.awt.Color(230, 230, 230));
        SingleplayerSelectionLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        SingleplayerSelectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SingleplayerSelectionLabel.setText("SINGLEPLAYER");
        SingleplayerSelectionLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SingleplayerSelectionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SingleplayerSelectionLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SingleplayerSelectionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SingleplayerSelectionLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout SingleplayerSelectionPanelLayout = new javax.swing.GroupLayout(SingleplayerSelectionPanel);
        SingleplayerSelectionPanel.setLayout(SingleplayerSelectionPanelLayout);
        SingleplayerSelectionPanelLayout.setHorizontalGroup(
            SingleplayerSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SingleplayerSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
        SingleplayerSelectionPanelLayout.setVerticalGroup(
            SingleplayerSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SingleplayerSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
        );

        MultiplayerSelectionPanel.setBackground(new java.awt.Color(230, 230, 230));

        MultiplayerSelectionLabel.setBackground(new java.awt.Color(230, 230, 230));
        MultiplayerSelectionLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        MultiplayerSelectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MultiplayerSelectionLabel.setText("MULTIPLAYER (500)");
        MultiplayerSelectionLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MultiplayerSelectionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MultiplayerSelectionLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MultiplayerSelectionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MultiplayerSelectionLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout MultiplayerSelectionPanelLayout = new javax.swing.GroupLayout(MultiplayerSelectionPanel);
        MultiplayerSelectionPanel.setLayout(MultiplayerSelectionPanelLayout);
        MultiplayerSelectionPanelLayout.setHorizontalGroup(
            MultiplayerSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultiplayerSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
        MultiplayerSelectionPanelLayout.setVerticalGroup(
            MultiplayerSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultiplayerSelectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
        );

        TournamenSelectionPanel.setBackground(new java.awt.Color(230, 230, 230));

        TournamenSelectiontLabel.setBackground(new java.awt.Color(230, 230, 230));
        TournamenSelectiontLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        TournamenSelectiontLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TournamenSelectiontLabel.setText("TOURNAMENT (500)");
        TournamenSelectiontLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TournamenSelectiontLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TournamenSelectiontLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TournamenSelectiontLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TournamenSelectiontLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout TournamenSelectionPanelLayout = new javax.swing.GroupLayout(TournamenSelectionPanel);
        TournamenSelectionPanel.setLayout(TournamenSelectionPanelLayout);
        TournamenSelectionPanelLayout.setHorizontalGroup(
            TournamenSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TournamenSelectiontLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
        TournamenSelectionPanelLayout.setVerticalGroup(
            TournamenSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TournamenSelectiontLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
        );

        TradePanel1.setBackground(new java.awt.Color(90, 50, 130));
        TradePanel1.setPreferredSize(new java.awt.Dimension(350, 50));

        TradeLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        TradeLabel1.setForeground(new java.awt.Color(230, 230, 230));
        TradeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel1.setText("T R A D E");
        TradeLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TradeLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TradeLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TradeLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TradeLabel1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout TradePanel1Layout = new javax.swing.GroupLayout(TradePanel1);
        TradePanel1.setLayout(TradePanel1Layout);
        TradePanel1Layout.setHorizontalGroup(
            TradePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TradeLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
        );
        TradePanel1Layout.setVerticalGroup(
            TradePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TradeLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MainMenuLayout = new javax.swing.GroupLayout(MainMenu);
        MainMenu.setLayout(MainMenuLayout);
        MainMenuLayout.setHorizontalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainMenuLayout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(SingleplayerSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165)
                        .addComponent(MultiplayerSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainMenuLayout.createSequentialGroup()
                        .addGap(477, 477, 477)
                        .addComponent(TournamenSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainMenuLayout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(TradePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(243, Short.MAX_VALUE))
        );
        MainMenuLayout.setVerticalGroup(
            MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainMenuLayout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MultiplayerSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SingleplayerSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addComponent(TournamenSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(TradePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );

        container.add(MainMenu, "card4");

        HowToMessagePanel.setBackground(new java.awt.Color(50, 30, 90));
        HowToMessagePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HowToMessagePanelMouseClicked(evt);
            }
        });

        HowToMessage.setColumns(20);
        HowToMessage.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        HowToMessage.setForeground(new java.awt.Color(50, 30, 90));
        HowToMessage.setRows(5);
        HowToMessage.setText("You are applying for a robber job. \nAs a test, your employer gave you a safe whose code\nis made of a 4 dinstinct digit number.\nYour job is to guess this secret code. As hints, \neverytime you guess a correct digit in its wrong \nposition, you get 1 silver. Everytime you guess \na digit in its correct position you get one gold. \nYou can trade 10 silver for 1 gold. Guess the \nsecret code the fastest. But careful, each guess \ncosts 5 gold .\nHappy thieving. xD\nLogin every 24 hours to get 50 gold coins.\n");
        HowToMessage.setBorder(null);

        javax.swing.GroupLayout HowToMessagePanelLayout = new javax.swing.GroupLayout(HowToMessagePanel);
        HowToMessagePanel.setLayout(HowToMessagePanelLayout);
        HowToMessagePanelLayout.setHorizontalGroup(
            HowToMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HowToMessagePanelLayout.createSequentialGroup()
                .addContainerGap(455, Short.MAX_VALUE)
                .addComponent(HowToMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(296, 296, 296))
        );
        HowToMessagePanelLayout.setVerticalGroup(
            HowToMessagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HowToMessagePanelLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(HowToMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(307, Short.MAX_VALUE))
        );

        container.add(HowToMessagePanel, "card2");

        GamePlay.setBackground(new java.awt.Color(50, 30, 90));

        TradePanel.setBackground(new java.awt.Color(90, 50, 130));

        TradeLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        TradeLabel.setForeground(new java.awt.Color(230, 230, 230));
        TradeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TradeLabel.setText("T R A D E");
        TradeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TradeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TradeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TradeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TradeLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout TradePanelLayout = new javax.swing.GroupLayout(TradePanel);
        TradePanel.setLayout(TradePanelLayout);
        TradePanelLayout.setHorizontalGroup(
            TradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TradeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );
        TradePanelLayout.setVerticalGroup(
            TradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TradeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
        );

        Guess.setBackground(new java.awt.Color(230, 230, 230));
        Guess.setPreferredSize(new java.awt.Dimension(430, 64));

        GuessSeperator.setBackground(new java.awt.Color(50, 30, 90));
        GuessSeperator.setForeground(new java.awt.Color(50, 30, 90));
        GuessSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        GuessSeperator.setPreferredSize(new java.awt.Dimension(5, 0));

        GuessLabel.setBackground(new java.awt.Color(50, 30, 90));
        GuessLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GuessLabel.setForeground(new java.awt.Color(50, 30, 90));
        GuessLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GuessLabel.setText("Enter Guess");
        GuessLabel.setToolTipText("");

        GuessInput.setBackground(new java.awt.Color(230, 230, 230));
        GuessInput.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        GuessInput.setForeground(new java.awt.Color(50, 30, 90));
        GuessInput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        GuessInput.setBorder(null);
        GuessInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GuessInputKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout GuessLayout = new javax.swing.GroupLayout(Guess);
        Guess.setLayout(GuessLayout);
        GuessLayout.setHorizontalGroup(
            GuessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GuessLayout.createSequentialGroup()
                .addComponent(GuessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GuessSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GuessInput, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        GuessLayout.setVerticalGroup(
            GuessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GuessSeperator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(GuessLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(GuessInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
        );

        ExitPanel.setBackground(new java.awt.Color(90, 50, 130));

        ExitLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        ExitLabel.setForeground(new java.awt.Color(230, 230, 230));
        ExitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ExitLabel.setText("E X I T");
        ExitLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ExitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ExitLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ExitLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout ExitPanelLayout = new javax.swing.GroupLayout(ExitPanel);
        ExitPanel.setLayout(ExitPanelLayout);
        ExitPanelLayout.setHorizontalGroup(
            ExitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ExitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );
        ExitPanelLayout.setVerticalGroup(
            ExitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ExitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        GuessSubmitPanel.setBackground(new java.awt.Color(230, 230, 230));
        GuessSubmitPanel.setPreferredSize(new java.awt.Dimension(1280, 100));

        GuessSubmitLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        GuessSubmitLabel.setForeground(new java.awt.Color(90, 50, 130));
        GuessSubmitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GuessSubmitLabel.setText("S U B M I T");
        GuessSubmitLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        GuessSubmitLabel.setPreferredSize(new java.awt.Dimension(1280, 32));
        GuessSubmitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuessSubmitLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GuessSubmitLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GuessSubmitLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout GuessSubmitPanelLayout = new javax.swing.GroupLayout(GuessSubmitPanel);
        GuessSubmitPanel.setLayout(GuessSubmitPanelLayout);
        GuessSubmitPanelLayout.setHorizontalGroup(
            GuessSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GuessSubmitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 739, Short.MAX_VALUE)
        );
        GuessSubmitPanelLayout.setVerticalGroup(
            GuessSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(GuessSubmitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout GamePlayLayout = new javax.swing.GroupLayout(GamePlay);
        GamePlay.setLayout(GamePlayLayout);
        GamePlayLayout.setHorizontalGroup(
            GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GamePlayLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(ExitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 662, Short.MAX_VALUE)
                .addComponent(TradePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GamePlayLayout.createSequentialGroup()
                    .addGap(422, 422, 422)
                    .addComponent(Guess, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(406, Short.MAX_VALUE)))
            .addGroup(GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GamePlayLayout.createSequentialGroup()
                    .addContainerGap(275, Short.MAX_VALUE)
                    .addComponent(GuessSubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(266, 266, 266)))
        );
        GamePlayLayout.setVerticalGroup(
            GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GamePlayLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ExitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TradePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(579, Short.MAX_VALUE))
            .addGroup(GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GamePlayLayout.createSequentialGroup()
                    .addGap(306, 306, 306)
                    .addComponent(Guess, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(359, Short.MAX_VALUE)))
            .addGroup(GamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GamePlayLayout.createSequentialGroup()
                    .addGap(445, 445, 445)
                    .addComponent(GuessSubmitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(184, Short.MAX_VALUE)))
        );

        container.add(GamePlay, "card3");

        Multiplayer.setBackground(new java.awt.Color(50, 30, 90));

        MultiMsgPanel.setBackground(new java.awt.Color(230, 230, 230));

        MultiMsgLabel.setFont(new java.awt.Font("SansSerif", 1, 32)); // NOI18N
        MultiMsgLabel.setForeground(new java.awt.Color(50, 30, 90));
        MultiMsgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout MultiMsgPanelLayout = new javax.swing.GroupLayout(MultiMsgPanel);
        MultiMsgPanel.setLayout(MultiMsgPanelLayout);
        MultiMsgPanelLayout.setHorizontalGroup(
            MultiMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultiMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
        );
        MultiMsgPanelLayout.setVerticalGroup(
            MultiMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultiMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );

        MultReadyPanel.setBackground(new java.awt.Color(90, 50, 130));
        MultReadyPanel.setPreferredSize(new java.awt.Dimension(1280, 100));

        MultReadyLabel.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        MultReadyLabel.setForeground(new java.awt.Color(230, 230, 230));
        MultReadyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MultReadyLabel.setText("R E A D Y");
        MultReadyLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MultReadyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MultReadyLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MultReadyLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MultReadyLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout MultReadyPanelLayout = new javax.swing.GroupLayout(MultReadyPanel);
        MultReadyPanel.setLayout(MultReadyPanelLayout);
        MultReadyPanelLayout.setHorizontalGroup(
            MultReadyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultReadyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        MultReadyPanelLayout.setVerticalGroup(
            MultReadyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultReadyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        MultExitPanel.setBackground(new java.awt.Color(90, 50, 130));
        MultExitPanel.setPreferredSize(new java.awt.Dimension(256, 79));

        MultExitLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        MultExitLabel.setForeground(new java.awt.Color(230, 230, 230));
        MultExitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MultExitLabel.setText("E X I T");
        MultExitLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        MultExitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MultExitLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MultExitLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MultExitLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout MultExitPanelLayout = new javax.swing.GroupLayout(MultExitPanel);
        MultExitPanel.setLayout(MultExitPanelLayout);
        MultExitPanelLayout.setHorizontalGroup(
            MultExitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultExitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
        );
        MultExitPanelLayout.setVerticalGroup(
            MultExitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MultExitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MultiplayerLayout = new javax.swing.GroupLayout(Multiplayer);
        Multiplayer.setLayout(MultiplayerLayout);
        MultiplayerLayout.setHorizontalGroup(
            MultiplayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MultiplayerLayout.createSequentialGroup()
                .addComponent(MultReadyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(MultiplayerLayout.createSequentialGroup()
                .addGroup(MultiplayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MultiplayerLayout.createSequentialGroup()
                        .addGap(383, 383, 383)
                        .addComponent(MultiMsgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MultiplayerLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(MultExitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        MultiplayerLayout.setVerticalGroup(
            MultiplayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MultiplayerLayout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(MultExitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(MultiMsgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(MultReadyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );

        container.add(Multiplayer, "card5");

        GameTopMenu.setBackground(new java.awt.Color(230, 230, 230));
        GameTopMenu.setPreferredSize(new java.awt.Dimension(1280, 50));

        HowToSeperator.setBackground(new java.awt.Color(50, 30, 90));
        HowToSeperator.setForeground(new java.awt.Color(50, 30, 90));
        HowToSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        HowToPanel.setBackground(new java.awt.Color(230, 230, 230));

        HowToLabel.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        HowToLabel.setForeground(new java.awt.Color(50, 30, 90));
        HowToLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HowToLabel.setText("HOW TO");
        HowToLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HowToLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HowToLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                HowToLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout HowToPanelLayout = new javax.swing.GroupLayout(HowToPanel);
        HowToPanel.setLayout(HowToPanelLayout);
        HowToPanelLayout.setHorizontalGroup(
            HowToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HowToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
        );
        HowToPanelLayout.setVerticalGroup(
            HowToPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HowToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        NicknameSeperator.setBackground(new java.awt.Color(50, 30, 90));
        NicknameSeperator.setForeground(new java.awt.Color(50, 30, 90));
        NicknameSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        GoldSeperator.setBackground(new java.awt.Color(50, 30, 90));
        GoldSeperator.setForeground(new java.awt.Color(230, 230, 230));
        GoldSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        SilverSeperator.setBackground(new java.awt.Color(50, 30, 90));
        SilverSeperator.setForeground(new java.awt.Color(230, 230, 230));
        SilverSeperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        UsernameLabel.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        UsernameLabel.setForeground(new java.awt.Color(50, 30, 90));
        UsernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UsernameLabel.setText(user.getNickname());

        GoldLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GoldLabel.setForeground(new java.awt.Color(50, 30, 90));
        GoldLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GoldLabel.setText("Gold Coins:");

        GoldNumber.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        GoldNumber.setForeground(new java.awt.Color(50, 30, 90));
        GoldNumber.setText(Integer.toString(user.getGold()));

        SilverLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        SilverLabel.setForeground(new java.awt.Color(50, 30, 90));
        SilverLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SilverLabel.setText("Silver Coins:");

        SilverNumber.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        SilverNumber.setForeground(new java.awt.Color(50, 30, 90));
        SilverNumber.setText(Integer.toString(user.getSilver()));

        javax.swing.GroupLayout GameTopMenuLayout = new javax.swing.GroupLayout(GameTopMenu);
        GameTopMenu.setLayout(GameTopMenuLayout);
        GameTopMenuLayout.setHorizontalGroup(
            GameTopMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameTopMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NicknameSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GoldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GoldNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GoldSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SilverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SilverNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SilverSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 325, Short.MAX_VALUE)
                .addComponent(HowToSeperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HowToPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        GameTopMenuLayout.setVerticalGroup(
            GameTopMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HowToSeperator)
            .addComponent(HowToPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(NicknameSeperator)
            .addComponent(GoldSeperator)
            .addComponent(SilverSeperator)
            .addComponent(UsernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(GoldLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(GoldNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(SilverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(SilverNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GameTopMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addComponent(GameTopMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HowToLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HowToLabelMouseClicked
        // TODO add your handling code here:
        cmp = container.getComponents()[0];
        container.removeAll();
        container.add(HowToMessagePanel);
        container.repaint();
        container.revalidate();
    }//GEN-LAST:event_HowToLabelMouseClicked

    private void HowToMessagePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HowToMessagePanelMouseClicked
        // TODO add your handling code here:
        container.removeAll();
        container.add(cmp);
        container.repaint();
        container.revalidate();
    }//GEN-LAST:event_HowToMessagePanelMouseClicked

    private void HowToLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HowToLabelMouseEntered
        // TODO add your handling code here:
        HowToPanel.setBackground(HowToPanel.getBackground().darker());
    }//GEN-LAST:event_HowToLabelMouseEntered

    private void HowToLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HowToLabelMouseExited
        // TODO add your handling code here:
        HowToPanel.setBackground(HowToPanel.getBackground().brighter());
    }//GEN-LAST:event_HowToLabelMouseExited

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try{
                con.sendMessage("leave");
                con.s.close();
        } catch (Exception e){
                e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void SingleplayerSelectionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SingleplayerSelectionLabelMouseEntered
        // TODO add your handling code here:
        SingleplayerSelectionPanel.setBackground(SingleplayerSelectionPanel.getBackground().darker());
    }//GEN-LAST:event_SingleplayerSelectionLabelMouseEntered

    private void SingleplayerSelectionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SingleplayerSelectionLabelMouseExited
        // TODO add your handling code here:
        SingleplayerSelectionPanel.setBackground(SingleplayerSelectionPanel.getBackground().brighter());
    }//GEN-LAST:event_SingleplayerSelectionLabelMouseExited

    private void MultiplayerSelectionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultiplayerSelectionLabelMouseEntered
        // TODO add your handling code here:
        MultiplayerSelectionPanel.setBackground(MultiplayerSelectionPanel.getBackground().darker());
    }//GEN-LAST:event_MultiplayerSelectionLabelMouseEntered

    private void MultiplayerSelectionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultiplayerSelectionLabelMouseExited
        // TODO add your handling code here:
        MultiplayerSelectionPanel.setBackground(MultiplayerSelectionPanel.getBackground().brighter());
    }//GEN-LAST:event_MultiplayerSelectionLabelMouseExited

    private void SingleplayerSelectionLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SingleplayerSelectionLabelMouseClicked
        // TODO add your handling code here:
        SingleplayerSelectionPanel.setBackground(SingleplayerSelectionPanel.getBackground().brighter());
        try{
                String msg;
                con.sendMessage("single");
                msg = con.receiveMessage();
                if (msg.contains("ERROR")){
                    throw new Exception(msg);
                }
                container.removeAll();
                container.add(GamePlay);
                container.repaint();
                container.revalidate();
                GuessInput.setText("");
        } catch (Exception e){
                JOptionPane.showMessageDialog(container,e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_SingleplayerSelectionLabelMouseClicked

    private void TournamenSelectiontLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TournamenSelectiontLabelMouseClicked
        // TODO add your handling code here:
        TournamenSelectionPanel.setBackground(TournamenSelectionPanel.getBackground().brighter());

        container.removeAll();
//        container.add(Tournament);
        container.repaint();
        container.revalidate();
    }//GEN-LAST:event_TournamenSelectiontLabelMouseClicked

    private void TournamenSelectiontLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TournamenSelectiontLabelMouseEntered
        // TODO add your handling code here:
        TournamenSelectionPanel.setBackground(TournamenSelectionPanel.getBackground().darker());
    }//GEN-LAST:event_TournamenSelectiontLabelMouseEntered

    private void TournamenSelectiontLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TournamenSelectiontLabelMouseExited
        // TODO add your handling code here:
        TournamenSelectionPanel.setBackground(TournamenSelectionPanel.getBackground().brighter());
    }//GEN-LAST:event_TournamenSelectiontLabelMouseExited

    private void MultiplayerSelectionLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultiplayerSelectionLabelMouseClicked
        // TODO add your handling code here:
        MultiplayerSelectionPanel.setBackground(MultiplayerSelectionPanel.getBackground().brighter());
        try{
                String msg;
                con.sendMessage("multi");
                msg = con.receiveMessage();
                System.out.println(msg);
                if (msg.contains("ERROR")){
                    throw new Exception(msg);
                }
                container.removeAll();
                container.add(Multiplayer);              
                container.repaint();
                container.revalidate();
                MultiMsgLabel.setText(msg);
        } catch (Exception e){
                JOptionPane.showMessageDialog(container,e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_MultiplayerSelectionLabelMouseClicked

    private void TradeLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabelMouseEntered
        // TODO add your handling code here:
        TradePanel.setBackground(new Color(110,80,160));
    }//GEN-LAST:event_TradeLabelMouseEntered

    private void TradeLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabelMouseExited
        // TODO add your handling code here:
        TradePanel.setBackground(new Color(90,50,130));
    }//GEN-LAST:event_TradeLabelMouseExited

    private void GuessSubmitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuessSubmitLabelMouseClicked
        // TODO add your handling code here:
        submitGuess();
    }//GEN-LAST:event_GuessSubmitLabelMouseClicked

    private void GuessSubmitLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuessSubmitLabelMouseEntered
        // TODO add your handling code here:
        GuessSubmitPanel.setBackground(new Color(90,50,130));
        GuessSubmitLabel.setForeground(new Color(230,230,230));
    }//GEN-LAST:event_GuessSubmitLabelMouseEntered

    private void GuessSubmitLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuessSubmitLabelMouseExited
        // TODO add your handling code here:
        GuessSubmitPanel.setBackground(new Color(230,230,230));
        GuessSubmitLabel.setForeground(new Color(90,50,130));
    }//GEN-LAST:event_GuessSubmitLabelMouseExited

    private void TradeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabelMouseClicked
        // TODO add your handling code here:
        try{
                String msg;
                con.sendMessage("trade");
                msg = con.receiveMessage();
                if (msg.contains("ERROR")){
                    JOptionPane.showMessageDialog(GamePlay,msg,"ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                user.goldCoins = user.getGold()+1;
                user.silverCoins = user.getSilver()-10;
                GoldNumber.setText(Integer.toString(user.getGold()));
                SilverNumber.setText(Integer.toString(user.getSilver()));
        } catch (Exception e){
                e.printStackTrace();
        }
    }//GEN-LAST:event_TradeLabelMouseClicked

    private void ExitLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLabelMouseEntered
        // TODO add your handling code here:
        ExitPanel.setBackground(new Color(110,80,160));
    }//GEN-LAST:event_ExitLabelMouseEntered

    private void ExitLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLabelMouseExited
        // TODO add your handling code here:
        ExitPanel.setBackground(new Color(90,50,130));
    }//GEN-LAST:event_ExitLabelMouseExited

    private void ExitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitLabelMouseClicked
        // TODO add your handling code here:
        ExitPanel.setBackground(new Color(90,50,130));
        try{
                con.sendMessage("exit");
                container.removeAll();
                container.add(MainMenu);
                container.repaint();
                container.revalidate();
        } catch (Exception e){
                e.printStackTrace();
        }
    }//GEN-LAST:event_ExitLabelMouseClicked

    private void GuessInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GuessInputKeyPressed
        // TODO add your handling code here:
            if (evt.getKeyCode()==KeyEvent.VK_ENTER){
                submitGuess();
            }
    }//GEN-LAST:event_GuessInputKeyPressed

    private void TradeLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabel1MouseClicked
        // TODO add your handling code here:
        try{
                String msg;
                con.sendMessage("trade");
                msg = con.receiveMessage();
                if (msg.contains("ERROR")){
                    JOptionPane.showMessageDialog(GamePlay,msg,"ERROR",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                user.goldCoins = user.getGold()+1;
                user.silverCoins = user.getSilver()-10;
                GoldNumber.setText(Integer.toString(user.getGold()));
                SilverNumber.setText(Integer.toString(user.getSilver()));
        } catch (Exception e){
                e.printStackTrace();
        }
    }//GEN-LAST:event_TradeLabel1MouseClicked

    private void TradeLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabel1MouseEntered
        // TODO add your handling code here:
        TradePanel1.setBackground(new Color(110,80,160));
    }//GEN-LAST:event_TradeLabel1MouseEntered

    private void TradeLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TradeLabel1MouseExited
        // TODO add your handling code here:
        TradePanel1.setBackground(new Color(90,50,130));
    }//GEN-LAST:event_TradeLabel1MouseExited

    private void MultExitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultExitLabelMouseClicked
        // TODO add your handling code here:
        MultExitPanel.setBackground(new Color(90,50,130));
        try{
                con.sendMessage("exit");
                container.removeAll();
                container.add(MainMenu);
                container.repaint();
                container.revalidate();
        } catch (Exception e){
                e.printStackTrace();
        }
    }//GEN-LAST:event_MultExitLabelMouseClicked

    private void MultExitLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultExitLabelMouseEntered
        // TODO add your handling code here:
        MultExitPanel.setBackground(new Color(110,80,160));
    }//GEN-LAST:event_MultExitLabelMouseEntered

    private void MultExitLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultExitLabelMouseExited
        // TODO add your handling code here:
        MultExitPanel.setBackground(new Color(90,50,130));
    }//GEN-LAST:event_MultExitLabelMouseExited

    private void MultReadyLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultReadyLabelMouseClicked
        // TODO add your handling code here:
        MultExitPanel.setBackground(new Color(90,50,130));
        try{
            String msg;
            con.sendMessage("ready");
            msg = con.receiveMessage();
            if (msg.contains("left")){
                container.removeAll();
                container.add(MainMenu);
                container.repaint();
                container.revalidate();
                return;
            }
            JOptionPane.showMessageDialog(GamePlay,msg,"INFO",JOptionPane.PLAIN_MESSAGE); 
            user.goldCoins = user.getGold()-500;
            GoldNumber.setText(Integer.toString(user.getGold()));
            container.removeAll();
            container.add(GamePlay);
            container.repaint();
            container.revalidate();
            GuessInput.setText("");
        }catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_MultReadyLabelMouseClicked

    private void MultReadyLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultReadyLabelMouseEntered
        // TODO add your handling code here:
        MultReadyPanel.setBackground(new Color(230,230,230));
        MultReadyLabel.setForeground(new Color(90,50,130));        
    }//GEN-LAST:event_MultReadyLabelMouseEntered

    private void MultReadyLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MultReadyLabelMouseExited
        // TODO add your handling code here:
        MultReadyPanel.setBackground(new Color(90,50,130));
        MultReadyLabel.setForeground(new Color(230,230,230));
    }//GEN-LAST:event_MultReadyLabelMouseExited

    //handle submission
    private void submitGuess(){
        String msg;
        String answer;
        int gold;
        int silver;
        try{
        	con.sendMessage(GuessInput.getText());
                msg = con.receiveMessage();
                if (msg.contains("ERROR")){
                        JOptionPane.showMessageDialog(GamePlay,msg,"ERROR",JOptionPane.ERROR_MESSAGE); 
                        return;
                }
                user.goldCoins = user.getGold()-5;      //paymenyt fee per guess
                if (msg.contains("SUCCESS")){
                        JOptionPane.showMessageDialog(GamePlay,msg,"SUCCESS",JOptionPane.PLAIN_MESSAGE); 
                        msg = con.receiveMessage();
                        System.out.println(msg);
                        if (msg.contains("combo")){
                            user.goldCoins = user.getGold()+50*Integer.parseInt(msg.split(" ")[1]);
                            msg = "Congrats! You were rewarded additoinal gold for winning "+msg.split(" ")[1]+" games in a row!";
                            JOptionPane.showMessageDialog(GamePlay,msg,"COMBO",JOptionPane.PLAIN_MESSAGE); 
                        }
                        user.goldCoins = user.getGold()+50;
                        GoldNumber.setText(Integer.toString(user.getGold()));
                        container.removeAll();
                        container.add(MainMenu);
                        container.repaint();
                        container.revalidate();
                        return;
                }
                if (msg.contains("FAILED")){
                        JOptionPane.showMessageDialog(GamePlay,msg,"FAILED",JOptionPane.WARNING_MESSAGE); 
                        container.removeAll();
                        container.add(MainMenu);
                        container.repaint();
                        container.revalidate();
                        return;
                }
                //Only in Multiplayer
                if (msg.contains("tie")){
                        JOptionPane.showMessageDialog(GamePlay,msg,"TIE",JOptionPane.PLAIN_MESSAGE); 
                        user.goldCoins = user.getGold()+500;
                        GoldNumber.setText(Integer.toString(user.getGold()));
                        container.removeAll();
                        container.add(MainMenu);
                        container.repaint();
                        container.revalidate();
                        return;
                }
                //Only in Multiplayer
                if (msg.contains("Waiting")){
                        JOptionPane.showMessageDialog(GamePlay,msg,"WAITING",JOptionPane.PLAIN_MESSAGE); 
                        msg = con.receiveMessage();
                        if (msg.contains("left")){
                            JOptionPane.showMessageDialog(GamePlay,msg,"LEFT",JOptionPane.PLAIN_MESSAGE); 
                            msg = con.receiveMessage();
                        }
                        if (msg.contains("SUCCESS")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"SUCCESS",JOptionPane.PLAIN_MESSAGE); 
                                msg = con.receiveMessage();
                                if (msg.contains("combo")){
                                    user.goldCoins = user.getGold()+50*Integer.parseInt(msg.split(" ")[1]);
                                }
                                user.goldCoins = user.getGold()+1000;
                                GoldNumber.setText(Integer.toString(user.getGold()));
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                        if (msg.contains("FAILED")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"FAILED",JOptionPane.WARNING_MESSAGE); 
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                        if (msg.contains("tie")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"TIE",JOptionPane.PLAIN_MESSAGE); 
                                user.goldCoins = user.getGold()+500;
                                GoldNumber.setText(Integer.toString(user.getGold()));
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                }
                if (msg.contains("left")){
                            JOptionPane.showMessageDialog(GamePlay,msg,"LEFT",JOptionPane.PLAIN_MESSAGE); 
                            msg = con.receiveMessage();
                        }
                        if (msg.contains("SUCCESS")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"SUCCESS",JOptionPane.PLAIN_MESSAGE); 
                                msg = con.receiveMessage();
                                if (msg.contains("combo")){
                                    user.goldCoins = user.getGold()+50*Integer.parseInt(msg.split(" ")[1]);
                                }
                                user.goldCoins = user.getGold()+1000;
                                GoldNumber.setText(Integer.toString(user.getGold()));
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                        if (msg.contains("FAILED")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"FAILED",JOptionPane.WARNING_MESSAGE); 
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                        if (msg.contains("tie")){
                                JOptionPane.showMessageDialog(GamePlay,msg,"TIE",JOptionPane.PLAIN_MESSAGE); 
                                user.goldCoins = user.getGold()+500;
                                GoldNumber.setText(Integer.toString(user.getGold()));
                                container.removeAll();
                                container.add(MainMenu);
                                container.repaint();
                                container.revalidate();
                                return;
                        }
                gold = Integer.parseInt(msg.split(" ")[0]);
                silver = Integer.parseInt(msg.split(" ")[1]);
                user.goldCoins = user.getGold()+gold;
                user.silverCoins = user.getSilver()+silver;
                GoldNumber.setText(Integer.toString(user.getGold()));
                SilverNumber.setText(Integer.toString(user.getSilver()));
                answer = "You got "+gold+" gold coins and "+silver+" silver coins.";
                JOptionPane.showMessageDialog(GamePlay,answer,"INFO",JOptionPane.INFORMATION_MESSAGE);                
        }catch (Exception e){
            e.printStackTrace();
        }
        return;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ExitLabel;
    private javax.swing.JPanel ExitPanel;
    private javax.swing.JPanel GamePlay;
    private javax.swing.JPanel GameTopMenu;
    private javax.swing.JLabel GoldLabel;
    private javax.swing.JLabel GoldNumber;
    private javax.swing.JSeparator GoldSeperator;
    private javax.swing.JPanel Guess;
    private javax.swing.JTextField GuessInput;
    private javax.swing.JLabel GuessLabel;
    private javax.swing.JSeparator GuessSeperator;
    private javax.swing.JLabel GuessSubmitLabel;
    private javax.swing.JPanel GuessSubmitPanel;
    private javax.swing.JLabel HowToLabel;
    private javax.swing.JTextArea HowToMessage;
    private javax.swing.JPanel HowToMessagePanel;
    private javax.swing.JPanel HowToPanel;
    private javax.swing.JSeparator HowToSeperator;
    private javax.swing.JPanel MainMenu;
    private javax.swing.JLabel MultExitLabel;
    private javax.swing.JPanel MultExitPanel;
    private javax.swing.JLabel MultReadyLabel;
    private javax.swing.JPanel MultReadyPanel;
    private javax.swing.JLabel MultiMsgLabel;
    private javax.swing.JPanel MultiMsgPanel;
    private javax.swing.JPanel Multiplayer;
    private javax.swing.JLabel MultiplayerSelectionLabel;
    private javax.swing.JPanel MultiplayerSelectionPanel;
    private javax.swing.JSeparator NicknameSeperator;
    private javax.swing.JLabel SilverLabel;
    private javax.swing.JLabel SilverNumber;
    private javax.swing.JSeparator SilverSeperator;
    private javax.swing.JLabel SingleplayerSelectionLabel;
    private javax.swing.JPanel SingleplayerSelectionPanel;
    private javax.swing.JPanel TournamenSelectionPanel;
    private javax.swing.JLabel TournamenSelectiontLabel;
    private javax.swing.JLabel TradeLabel;
    private javax.swing.JLabel TradeLabel1;
    private javax.swing.JPanel TradePanel;
    private javax.swing.JPanel TradePanel1;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JPanel bg;
    private javax.swing.JPanel container;
    // End of variables declaration//GEN-END:variables
}
